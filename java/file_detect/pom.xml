<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>java</artifactId>
        <groupId>org.renm</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <groupId>com.renm</groupId>
    <artifactId>file_detect</artifactId>
    <version>1.0-SNAPSHOT</version>

    <name>file_detect</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <springframework.version>4.3.18.RELEASE</springframework.version>
        <mybatis.version>3.5.6</mybatis.version>
        <mybatis-spring.version>2.0.0</mybatis-spring.version>
        <mysql.jdbcdriver.version>5.1.46</mysql.jdbcdriver.version>
    </properties>

    <dependencies>
        <!--
            for ClassPathXmlApplicationContext()
        -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${springframework.version}</version>
        </dependency>
        <!--
            for org.springframework.dao.support.DaoSupport
        -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${springframework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${springframework.version}</version>
        </dependency>

        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>${mybatis-spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>${mybatis.version}</version>
        </dependency>

      <!--  <dependency>
            <groupId>org.apache.maven.archetypes</groupId>
            <artifactId>maven-archetype-quickstart</artifactId>
            <version>1.3</version>
        </dependency>-->

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.jdbcdriver.version}</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
        </dependency>
    </dependencies>


    <build>
        <!--<finalName>${project.artifactId}</finalName>-->
        <!--<outputDirectory>../build/mvnoutput/${project.artifactId}</outputDirectory>-->
        <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
            <plugins>
                <!--  <plugin>
                      <artifactId>maven-clean-plugin</artifactId>
                      <version>3.0.0</version>
                  </plugin>-->
                <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
                <!--    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>3.0.2</version>
                    </plugin>-->

                <!--
                    maven-compiler-plugin插件，因为maven的核心插件compile插件默认只支持编译JAVA1.3，
                    如果你要使用java6，必须要使用这个maven-compiler-plugin插件才可以使用JAVA的更高版本
                -->
                <plugin>
                    <groupId>org.apache.maven.plugin</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <!--<version>3.7.0</version>-->
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                        <encoding>${project.build.sourceEncoding}</encoding>
                    </configuration>
                </plugin>
                <!--
                    maven-surefire-plugin插件，这个插件用来在maven构建生命周期的test phase执行一个应用的单元测试。
                    使用这个插件后，你可以使用mvn surefire:test或者mvn test可以运行工程下的单元测试
                -->
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.20.1</version>
                </plugin>
                <!--<plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>-->
                <!--<plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>-->
                <!-- <plugin>
                     <artifactId>maven-deploy-plugin</artifactId>
                     <version>2.8.2</version>
                 </plugin>-->
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
        </plugins>

        <resources>
            <!-- maven项目中src源代码下的xml等资源文件编译进classes文件夹，
              注意：如果没有这个，它会自动搜索resources下是否有mapper.xml文件，
              如果没有就会报org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.pet.mapper.PetMapper.selectByPrimaryKey-->
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>

            <!--将resources目录下的配置文件编译进classes文件  -->
            <resource>
                <directory>src/main/resources</directory>
            </resource>
        </resources>
    </build>


</project>